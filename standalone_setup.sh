#!/bin/bash

################################################################################
# Standalone CVF Environment Setup Script
# 
# This script works independently without external dependencies
# It creates a complete Python + Boost environment from scratch
#
# Usage: ./standalone_master_setup.sh [OPTIONS] [PYTHON_VERSION] [BOOST_VERSION]
#
################################################################################

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_PYTHON_VERSION="3.8.10"
DEFAULT_BOOST_VERSION="1.82.0"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check system requirements
check_system_requirements() {
    log "Checking system requirements..."
    
    # Check if we're on Linux
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        error "This script is designed for Linux systems only"
        exit 1
    fi
    
    # Check for essential tools
    local missing_tools=()
    
    if ! command_exists wget && ! command_exists curl; then
        missing_tools+=("wget or curl")
    fi
    
    if ! command_exists tar; then
        missing_tools+=("tar")
    fi
    
    if ! command_exists make; then
        missing_tools+=("make")
    fi
    
    if ! command_exists gcc; then
        missing_tools+=("gcc")
    fi
    
    if ! command_exists g++; then
        missing_tools+=("g++")
    fi
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        error "Missing required tools: ${missing_tools[*]}"
        info "Please install them using your package manager:"
        info "  Ubuntu/Debian: sudo apt-get install wget tar make gcc g++ build-essential"
        info "  CentOS/RHEL: sudo yum install wget tar make gcc gcc-c++"
        exit 1
    fi
    
    log "System requirements check passed"
}

# Function to create a complete setup script
create_complete_setup_script() {
    local python_version="$1"
    local boost_version="$2"
    local script_name="python${python_version//.}_boost${boost_version//.}_setup.sh"
    
    log "Creating complete setup script: $script_name"
    
    # Calculate derived values
    local boost_underscore=$(echo "$boost_version" | sed 's/\./_/g')
    local python_major_minor=$(echo "$python_version" | cut -d. -f1,2)
    local python_major_minor_no_dot=$(echo "$python_major_minor" | sed 's/\.//')
    
    cat > "$script_name" << EOF
#!/bin/bash

################################################################################
# Complete Python $python_version + Boost $boost_version Setup Script
# Auto-generated by standalone_master_setup.sh
#
# This script installs:
# - Python $python_version (alongside existing Python installations)
# - Boost $boost_version with Python $python_major_minor support
# - Environment scripts for easy activation
#
################################################################################

set -e

# Configuration
PYTHON_VERSION="$python_version"
BOOST_VERSION="$boost_version"
BOOST_VERSION_UNDERSCORE="$boost_underscore"

# Build directories
PYTHON_BUILD_DIR="/tmp/python${python_major_minor_no_dot}_build"
BOOST_BUILD_DIR="/tmp/boost_python${python_major_minor_no_dot}_build"

# Install prefixes
PYTHON_INSTALL_PREFIX="/opt/python$python_version"
BOOST_INSTALL_PREFIX="/opt/boost_${boost_underscore}_python${python_major_minor_no_dot}"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "\${GREEN}[\$(date '+%H:%M:%S')] \$1\${NC}"
}

error() {
    echo -e "\${RED}[ERROR] \$1\${NC}"
}

info() {
    echo -e "\${BLUE}[INFO] \$1\${NC}"
}

# Function to download Python
download_python() {
    log "Preparing Python \$PYTHON_VERSION source..."
    
    mkdir -p "\$PYTHON_BUILD_DIR"
    cd "\$PYTHON_BUILD_DIR"
    
    # Check if Python archive already exists
    if [ -f "Python-\$PYTHON_VERSION.tgz" ]; then
        log "Found existing Python-\$PYTHON_VERSION.tgz, skipping download"
        
        # Verify the archive is valid
        if tar -tzf "Python-\$PYTHON_VERSION.tgz" >/dev/null 2>&1; then
            log "Existing archive is valid, using it"
        else
            log "Existing archive is corrupted, re-downloading..."
            rm -f "Python-\$PYTHON_VERSION.tgz"
        fi
    fi
    
    # Download if we don't have a valid archive
    if [ ! -f "Python-\$PYTHON_VERSION.tgz" ]; then
        log "Downloading Python \$PYTHON_VERSION..."
        local python_url="https://www.python.org/ftp/python/\$PYTHON_VERSION/Python-\$PYTHON_VERSION.tgz"
        
        if command -v wget >/dev/null 2>&1; then
            wget "\$python_url"
        elif command -v curl >/dev/null 2>&1; then
            curl -O "\$python_url"
        else
            error "Neither wget nor curl found"
            exit 1
        fi
        
        # Verify the downloaded archive
        if ! tar -tzf "Python-\$PYTHON_VERSION.tgz" >/dev/null 2>&1; then
            error "Downloaded Python archive is corrupted"
            exit 1
        fi
        
        log "Python source downloaded successfully"
    fi
    
    # Clean up any existing extracted directory
    if [ -d "Python-\$PYTHON_VERSION" ]; then
        rm -rf "Python-\$PYTHON_VERSION"
    fi
    
    # Extract the archive
    log "Extracting Python source..."
    tar -xzf "Python-\$PYTHON_VERSION.tgz"
    cd "Python-\$PYTHON_VERSION"
}

# Function to build and install Python
install_python() {
    log "Checking Python \$PYTHON_VERSION installation..."
    
    # Check if Python is already installed in the target location
    if [ -f "\$PYTHON_INSTALL_PREFIX/bin/python3" ]; then
        local installed_version=\$("\$PYTHON_INSTALL_PREFIX/bin/python3" --version 2>&1 | cut -d' ' -f2)
        if [ "\$installed_version" = "\$PYTHON_VERSION" ]; then
            log "Python \$PYTHON_VERSION is already installed at \$PYTHON_INSTALL_PREFIX"
            log "Skipping Python installation"
            return 0
        else
            log "Found different Python version (\$installed_version), reinstalling \$PYTHON_VERSION"
        fi
    fi
    
    log "Building and installing Python \$PYTHON_VERSION to \$PYTHON_INSTALL_PREFIX..."
    
    download_python
    
    # Configure with shared library support
    ./configure \\
        --prefix="\$PYTHON_INSTALL_PREFIX" \\
        --enable-shared \\
        --enable-optimizations \\
        --with-lto \\
        --with-computed-gotos \\
        --with-system-ffi
    
    # Build Python
    make -j\$(nproc)
    
    # Install Python
    make install
    
    # Update shared library cache
    echo "\$PYTHON_INSTALL_PREFIX/lib" > /etc/ld.so.conf.d/python\$PYTHON_VERSION.conf
    ldconfig
    
    log "Python \$PYTHON_VERSION installed successfully"
}

# Function to download Boost
download_boost() {
    log "Preparing Boost \$BOOST_VERSION source..."
    
    mkdir -p "\$BOOST_BUILD_DIR"
    cd "\$BOOST_BUILD_DIR"
    
    # Check if Boost archive already exists
    if [ -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" ]; then
        log "Found existing boost_\$BOOST_VERSION_UNDERSCORE.tar.gz, checking validity..."
        
        # Verify the archive is valid and has proper size
        local file_size=\$(stat -c%s "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null || echo 0)
        local expected_size=50000000  # Expect at least 50MB for Boost 1.82.0
        
        if [ "\$file_size" -gt "\$expected_size" ] && file "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" | grep -q "gzip compressed"; then
            if tar -tzf "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" >/dev/null 2>&1; then
                log "Existing Boost archive is valid, skipping download"
            else
                log "Existing archive is corrupted, re-downloading..."
                rm -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
            fi
        else
            log "Existing archive is too small or invalid, re-downloading..."
            rm -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
        fi
    fi
    
    # Download if we don't have a valid archive
    if [ ! -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" ]; then
        log "Downloading Boost \$BOOST_VERSION..."
        
        # Try multiple mirrors for Boost download with better URLs
        local boost_urls=(
            # GitHub releases (most reliable)
            "https://github.com/boostorg/boost/releases/download/boost-\$BOOST_VERSION/boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
            # Official Boost website
            "https://dl.bintray.com/boostorg/release/\$BOOST_VERSION/source/boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
            # JFrog Artifactory
            "https://boostorg.jfrog.io/artifactory/main/release/\$BOOST_VERSION/source/boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
            # Archives.boost.io
            "https://archives.boost.io/release/\$BOOST_VERSION/source/boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
            # SourceForge direct link (avoiding redirect)
            "https://downloads.sourceforge.net/project/boost/boost/\$BOOST_VERSION/boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"
        )
        
        local downloaded=false
        local expected_size=50000000  # Expect at least 50MB for Boost 1.82.0
        
        for boost_url in "\${boost_urls[@]}"; do
            log "Trying: \$boost_url"
            
            # Clean up previous attempt
            rm -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null
            
            local download_success=false
            if command -v wget >/dev/null 2>&1; then
                if wget --timeout=30 --tries=2 "\$boost_url" -O "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null; then
                    download_success=true
                fi
            elif command -v curl >/dev/null 2>&1; then
                if curl --connect-timeout 30 --max-time 300 -L "\$boost_url" -o "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null; then
                    download_success=true
                fi
            fi
            
            # Verify the download size and content
            if [ "\$download_success" = true ] && [ -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" ]; then
                local file_size=\$(stat -c%s "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null || echo 0)
                log "Downloaded file size: \$file_size bytes"
                
                if [ "\$file_size" -gt "\$expected_size" ]; then
                    # Check if it's actually a gzip file
                    if file "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" | grep -q "gzip compressed"; then
                        log "Successfully downloaded Boost from \$boost_url"
                        downloaded=true
                        break
                    else
                        log "Downloaded file is not a valid gzip archive"
                    fi
                else
                    log "Downloaded file is too small (\$file_size bytes), likely an error page"
                fi
            fi
            
            log "Failed to download from \$boost_url, trying next..."
            rm -f "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz" 2>/dev/null
        done
        
        if [ "\$downloaded" = false ]; then
            error "Failed to download Boost from any mirror"
            error "You may need to:"
            error "1. Check your internet connection"
            error "2. Manually download boost_\$BOOST_VERSION_UNDERSCORE.tar.gz from https://www.boost.org/users/download/"
            error "3. Place it in \$BOOST_BUILD_DIR and run this script again"
            exit 1
        fi
        
        log "Boost source downloaded successfully"
    fi
    
    # Clean up any existing extracted directory
    if [ -d "boost_\$BOOST_VERSION_UNDERSCORE" ]; then
        rm -rf "boost_\$BOOST_VERSION_UNDERSCORE"
    fi
    
    # Extract with better error handling
    log "Extracting Boost archive..."
    if ! tar -xzf "boost_\$BOOST_VERSION_UNDERSCORE.tar.gz"; then
        error "Failed to extract Boost archive"
        exit 1
    fi
    
    if [ ! -d "boost_\$BOOST_VERSION_UNDERSCORE" ]; then
        error "Boost directory not found after extraction"
        exit 1
    fi
    
    cd "boost_\$BOOST_VERSION_UNDERSCORE"
    log "Boost extracted successfully"
}

# Function to build and install Boost
install_boost() {
    log "Checking Boost \$BOOST_VERSION installation..."
    
    # Check if Boost is already installed in the target location
    if [ -f "\$BOOST_INSTALL_PREFIX/include/boost/version.hpp" ]; then
        local installed_version=\$(grep "#define BOOST_VERSION " "\$BOOST_INSTALL_PREFIX/include/boost/version.hpp" | awk '{print \$3}')
        local expected_version_num=\$(echo "\$BOOST_VERSION" | sed 's/\\.//g' | awk '{printf "%d%02d%02d", substr(\$1,1,1), substr(\$1,2,2), substr(\$1,4,2)}')
        
        if [ "\$installed_version" = "\$expected_version_num" ]; then
            # Also check if Python.Boost is available
            if [ -f "\$BOOST_INSTALL_PREFIX/lib/libboost_python$python_major_minor_no_dot.so" ] || [ -f "\$BOOST_INSTALL_PREFIX/lib/libboost_python$python_major_minor_no_dot.a" ]; then
                log "Boost \$BOOST_VERSION with Python \$PYTHON_VERSION support is already installed at \$BOOST_INSTALL_PREFIX"
                log "Skipping Boost installation"
                return 0
            else
                log "Found Boost \$BOOST_VERSION but Python support is missing, rebuilding..."
            fi
        else
            log "Found different Boost version, reinstalling \$BOOST_VERSION"
        fi
    fi
    
    log "Building and installing Boost \$BOOST_VERSION with Python \$PYTHON_VERSION support..."
    
    download_boost
    
    # Bootstrap Boost
    ./bootstrap.sh \\
        --with-python="\$PYTHON_INSTALL_PREFIX/bin/python3" \\
        --with-python-version=$python_major_minor \\
        --with-python-root="\$PYTHON_INSTALL_PREFIX" \\
        --prefix="\$BOOST_INSTALL_PREFIX"
    
    # Build Boost
    ./b2 \\
        --prefix="\$BOOST_INSTALL_PREFIX" \\
        --with-python \\
        python=$python_major_minor \\
        include="\$PYTHON_INSTALL_PREFIX/include/python$python_major_minor" \\
        cxxflags="-I\$PYTHON_INSTALL_PREFIX/include/python$python_major_minor" \\
        linkflags="-L\$PYTHON_INSTALL_PREFIX/lib" \\
        variant=release \\
        link=shared \\
        threading=multi \\
        runtime-link=shared \\
        -j\$(nproc) \\
        install
    
    log "Boost \$BOOST_VERSION installed successfully"
}

# Function to create environment script
create_environment_script() {
    local env_script="setup_boost_python${python_major_minor_no_dot}.sh"
    
    log "Creating environment script: \$env_script"
    
    cat > "\$env_script" << ENVEOF
#!/bin/bash

# Environment setup for Python $python_version + Boost $boost_version
# Generated by: $script_name

export PYTHON_ROOT="/opt/python$python_version"
export BOOST_ROOT="/opt/boost_${boost_underscore}_python${python_major_minor_no_dot}"
export PYTHON_VERSION="$python_version"
export BOOST_VERSION="$boost_version"

# Update PATH
export PATH="\\\${PYTHON_ROOT}/bin:\\\${PATH}"

# Update library path
export LD_LIBRARY_PATH="\\\${PYTHON_ROOT}/lib:\\\${BOOST_ROOT}/lib:\\\${LD_LIBRARY_PATH}"

# Update Python path to include Boost.Python module location
export PYTHONPATH="\\\${BOOST_ROOT}/lib/python3.8/site-packages:\\\${BOOST_ROOT}/lib:\\\${PYTHONPATH}"

# CMake configuration
export CMAKE_PREFIX_PATH="\\\${PYTHON_ROOT}:\\\${BOOST_ROOT}:\\\${CMAKE_PREFIX_PATH}"

# Boost-specific variables
export BOOST_INCLUDEDIR="\\\${BOOST_ROOT}/include"
export BOOST_LIBRARYDIR="\\\${BOOST_ROOT}/lib"

echo "Environment activated:"
echo "  Python: \\\${PYTHON_VERSION} at \\\${PYTHON_ROOT}"
echo "  Boost: \\\${BOOST_VERSION} at \\\${BOOST_ROOT}"
echo ""
echo "Verify with:"
echo "  python3 --version"
echo "  python3 -c 'import sys; print(\"Python executable:\", sys.executable)'"
echo "  ls \\\${BOOST_ROOT}/lib/libboost_python*.so"
echo ""
echo "To test Boost.Python, compile a C++ program that uses it."
echo "Boost.Python is a C++ library, not a Python module."
ENVEOF
    
    chmod +x "\$env_script"
    log "Environment script created: \$env_script"
    
    return 0
}

# Function to verify installation
verify_installation() {
    log "Verifying installation..."
    
    # Source environment
    source "./setup_boost_python${python_major_minor_no_dot}.sh"
    
    # Check Python
    if ! "\$PYTHON_INSTALL_PREFIX/bin/python3" --version; then
        error "Python verification failed"
        return 1
    fi
    
    # Check Boost.Python libraries exist
    if ! ls "\$BOOST_INSTALL_PREFIX/lib/libboost_python*.so" >/dev/null 2>&1; then
        error "Boost.Python libraries not found"
        return 1
    fi
    
    # Check if we can compile a simple Boost.Python test
    log "Checking Boost.Python library availability..."
    if ! pkg-config --exists python3; then
        log "Warning: pkg-config for python3 not found, skipping compile test"
    else
        log "Boost.Python libraries found and environment is configured"
    fi
    
    log "Installation verification successful!"
    return 0
}

# Main function
main() {
    local action="all"
    
    # Parse arguments
    while [[ \$# -gt 0 ]]; do
        case \$1 in
            --install)
                action="install"
                shift
                ;;
            --setup-only)
                action="setup"
                shift
                ;;
            --verify)
                action="verify"
                shift
                ;;
            --all)
                action="all"
                shift
                ;;
            --help|-h)
                echo "Usage: \$0 [--install|--setup-only|--verify|--all|--help]"
                echo ""
                echo "Options:"
                echo "  --install     Install Python and Boost only"
                echo "  --setup-only  Create environment scripts only"
                echo "  --verify      Verify existing installation"
                echo "  --all         Install everything and create scripts (default)"
                echo "  --help        Show this help"
                exit 0
                ;;
            *)
                echo "Unknown option: \$1"
                exit 1
                ;;
        esac
    done
    
    log "Starting Python \$PYTHON_VERSION + Boost \$BOOST_VERSION setup..."
    log "Action: \$action"
    echo
    
    case \$action in
        install)
            install_python
            install_boost
            ;;
        setup)
            create_environment_script
            ;;
        verify)
            verify_installation
            ;;
        all)
            install_python
            install_boost
            create_environment_script
            verify_installation
            ;;
        *)
            error "Unknown action: \$action"
            exit 1
            ;;
    esac
    
    echo
    log "Setup completed successfully!"
    info "To use this environment:"
    echo "  source setup_boost_python${python_major_minor_no_dot}.sh"
    echo "  python3 --version"
}

# Check if running as root
if [ "\$EUID" -ne 0 ]; then
    error "This script must be run as root (use sudo)"
    exit 1
fi

# Run main function
main "\$@"
EOF

    chmod +x "$script_name"
    log "Complete setup script created: $script_name"
    echo "$script_name"
}

# Function to show usage
show_usage() {
    cat << EOF
Standalone CVF Environment Setup Script

Usage: $0 [OPTIONS] [PYTHON_VERSION] [BOOST_VERSION]

OPTIONS:
    --help, -h              Show this help message
    --check-system          Check system requirements only
    --create-only           Only create the setup script, don't run it
    --install               Create and run the setup script
    --list-versions         List common Python and Boost versions

EXAMPLES:
    $0                                    # Create setup for Python $DEFAULT_PYTHON_VERSION + Boost $DEFAULT_BOOST_VERSION
    $0 3.10.12 1.83.0                   # Create setup for specific versions
    $0 --install 3.8.10 1.82.0         # Create and run installation
    $0 --check-system                    # Check system requirements only

EOF
}

# Function to list versions
list_versions() {
    cat << EOF
Common Python Versions:
  3.8.10, 3.8.18
  3.9.15, 3.9.18
  3.10.8, 3.10.12
  3.11.4, 3.11.6

Common Boost Versions:
  1.80.0, 1.81.0, 1.82.0, 1.83.0, 1.84.0

Recommended Combinations:
  Python 3.8.10 + Boost 1.82.0 (default)
  Python 3.10.12 + Boost 1.83.0 (latest)

EOF
}

# Main execution function
main() {
    local python_version="$DEFAULT_PYTHON_VERSION"
    local boost_version="$DEFAULT_BOOST_VERSION"
    local action="create"
    local positional_args=()
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_usage
                exit 0
                ;;
            --list-versions)
                list_versions
                exit 0
                ;;
            --check-system)
                check_system_requirements
                exit 0
                ;;
            --create-only)
                action="create"
                shift
                ;;
            --install)
                action="install"
                shift
                ;;
            [0-9]*.[0-9]*.[0-9]*)
                positional_args+=("$1")
                shift
                ;;
            *)
                error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Process positional arguments (version numbers)
    if [ ${#positional_args[@]} -ge 1 ]; then
        python_version="${positional_args[0]}"
    fi
    if [ ${#positional_args[@]} -ge 2 ]; then
        boost_version="${positional_args[1]}"
    fi
    
    # Show configuration
    log "Standalone CVF Environment Setup"
    info "Python Version: $python_version"
    info "Boost Version: $boost_version"
    info "Action: $action"
    info "Working Directory: $SCRIPT_DIR"
    echo
    
    # Check system requirements for install action
    if [[ "$action" == "install" ]]; then
        check_system_requirements
    fi
    
    # Execute the requested action
    case $action in
        create)
            local script_name=$(create_complete_setup_script "$python_version" "$boost_version")
            info "Setup script created: $script_name"
            echo
            info "To install, run:"
            echo "  sudo ./$script_name --all"
            ;;
        install)
            local script_name=$(create_complete_setup_script "$python_version" "$boost_version")
            log "Running installation..."
            bash "$script_name" --all
            ;;
        *)
            error "Unknown action: $action"
            exit 1
            ;;
    esac
    
    echo
    log "Standalone setup completed successfully!"
}

# Run main function
main "$@"
